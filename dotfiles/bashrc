#!/bin/usr/env bash

# Loads all Homelab support

# Do nothing if not running interactively
[[ -n $PS1 ]] || return

CONFIG_DIR="$HOME/.config/homelab"
CONFIG_FILE="$CONFIG_DIR/homelab.conf"
ENV_FILE="$CONFIG_DIR/homelab.env"
HOMELAB_ROOT="$(git -C "$(dirname "$(realpath "${BASH_SOURCE[0]}")")" rev-parse --show-toplevel)"

runElevated() {
    [[ $EUID != 0 ]] && sudo "$@" || "$@" > /dev/null 2>&1
    return $?
}

cdhl() {
        cd "$HOMELAB_ROOT"
}

cdhp() {
        # Change to private homelab directory
        if [[ -d ~/homelab_priv ]]; then
                cd ~/homelab_priv
        fi
}

getPackageManager() {
        # Determine Package Manager
        for packageManager in apt dnf; do
                if command -v $packageManager &>/dev/null; then
                        echo $packageManager
                        return
                fi
        done
}

initializeHomelab() {

        # Make sure config directory exists
        mkdir -p "$CONFIG_DIR"

        # Check for existence of the config file
        if [[ ! -f "$CONFIG_FILE" ]]; then
                # Add default set of applications to new config
                jq -n '{
                        allApps: ["ncdu","eza","bat"],
                        aptApps: ["screenfetch"],
                        dnfApps: ["fastfetch"],
                        excludeApps: []
                }' > "$CONFIG_FILE"
                echo -e "Homelab config file created: $CONFIG_FILE\n"
        fi
}

installApps() {
    local packageManager=$(getPackageManager)
    local requiredApps=()

    if [[ -z $packageManager ]]; then
        echo "No supported package managers found. Nothing will be installed."
        return 1
    fi

    local temp_json
    temp_json="$(mktemp)"

    # In case excludeApps does not exist in the legacy config file
    jq '.excludeApps //= []' "$CONFIG_FILE" > "$temp_json" && mv "$temp_json" "$CONFIG_FILE"

    mapfile -t excludeApps < <(jq -r '.excludeApps[]' "$CONFIG_FILE")
    if [[ $packageManager == "apt" ]]; then
        installedApps="$(apt list --installed 2>/dev/null)"
        mapfile -t requiredApps < <(jq -r '.allApps[] , .aptApps[]' "$CONFIG_FILE")
    elif [[ $packageManager == "dnf" ]]; then
        installedApps="$(dnf list installed 2>/dev/null)"
        mapfile -t requiredApps < <(jq -r '.allApps[] , .dnfApps[]' "$CONFIG_FILE")
    fi

    local repositoryUpdated=''
    for app in "${requiredApps[@]}"; do
        if echo "$installedApps" | grep "^$app[/\.]" >/dev/null 2>&1; then
            continue
        fi

        if [[ " ${excludeApps[*]} " == *" $app "* ]]; then
                echo -e "$app was added to the exclude list and will be skipped\n"
                continue
        fi

        case $packageManager in
        apt)
            [[ $repositoryUpdated != 'y' ]] && echo "Updating repositories..." && runElevated apt update -q > /dev/null 2>&1 && repositoryUpdated='y'
            echo "Installing $app..."
            runElevated apt install -y "$app" > /dev/null 2>&1
            ;;
        dnf)
            [[ $repositoryUpdated != 'y' ]] && echo "Updating repositories..." && runElevated dnf update -q -y && runElevated dnf install epel-release -q -y && repositoryUpdated='y'
            echo "Installing $app..."
            runElevated dnf install -y "$app" 2>&1
            ;;
        esac

        if (( $? > 0 )); then
            echo "Install failed! Adding $app to the list of excluded apps."
            jq --arg app "$app" '.excludeApps += [$app]' "$CONFIG_FILE" > "$temp_json" && mv "$temp_json" "$CONFIG_FILE"
        fi
    done
}

checkRepo() {
        git -C "$HOMELAB_ROOT" fetch origin

        # See if local repo has unstaged changes...
        if ! git -C "$HOMELAB_ROOT" diff --quiet; then
                echo -e "Your Homelab repo has unstaged changes.\n"
        fi

        # See if local repo has uncommitted changes...
        if ! git -C "$HOMELAB_ROOT" diff --cached --quiet; then
                echo -e "Your Homelab repo has staged but uncommited changes.\n"
        fi

        # See if local repo is behind...
        if (( $(git -C "$HOMELAB_ROOT" rev-list --count @..@{u} ) > 0 )); then
                if read -p "Homelab repo needs updating. Would you like to do this now? (y/n): " response && [[ "${response,,}" == "y" ]]; then
                        git -C "$HOMELAB_ROOT" pull
                fi
        fi

        # See if local repo is ahead...
        if (( $(git -C "$HOMELAB_ROOT" rev-list --count @{u}..@ ) > 0 )); then
                if read -p "You have local Homelab changes. Push to remote? (y/n): " response && [[ "${response,,}" == "y" ]]; then
                        git -C "$HOMELAB_ROOT" push
                fi
        fi
}

initializeHomelab
checkRepo
installApps

# set PATH so it includes homelab scripts
if [[ -d "$HOME/scripts" ]] ; then
        PATH="$HOME/scripts:$PATH"
fi

# Make sure there is a nano backup directory
if [[ ! -d "$HOME/.nanobackup" ]]; then
        mkdir "$HOME/.nanobackup"
fi

# Environment
export EDITOR="nano" PAGER="less"
export GREP_COLOR='1;36'
export HISTCONTROL="ignoredups" HISTSIZE=5000 HISTFILESIZE=5000
export TZ='America/Chicago'
export GIT_DEFAULT_BRANCH="main"

if [[ -f ${ENV_FILE} ]]; then
        source ${ENV_FILE}
fi

# Shell options
shopt -s cdspell
shopt -s checkwinsize
shopt -s autocd   2>/dev/null || true
shopt -s dirspell 2>/dev/null || true

# Aliases
alias ..='echo "cd .."; cd ..'
alias ...='echo "cd ../.."; cd ../..'
alias ....='echo "cd ../../.."; cd ../../..'
alias whereami='curl -sSf --connect-timeout 1 https://ipinfo.io/city 2>/dev/null || echo "NO CONNECTION"'
alias l='ls'
alias ll='ls -hAlF'
alias flushdns='resolvectl flush-caches'
alias update-all='runElevated apt update && runElevated apt upgrade -y'
grep --color=auto < /dev/null &>/dev/null && alias grep='grep --color=auto'

if command -v batcat >/dev/null 2>&1; then
        alias bat='batcat'
fi

if command -v ncdu >/dev/null 2>&1; then
        alias du='ncdu -x -e --color dark'
fi

if command -v eza >/dev/null 2>&1; then
        alias ls='eza --group-directories-first --icons'
else
        alias ls='ls --group-directories-first --color=auto'
        eval $(dircolors -b)
fi

# Show system info
command -v screenfetch >/dev/null && screenfetch
command -v fastfetch >/dev/null && fastfetch

# Check filesystem usage
if [[ -f "$HOME/scripts/check-freespace.sh" ]]; then
        echo
        $HOME/scripts/check-freespace.sh 75
fi

source ~/scripts/fancy-prompt.sh

# Report location
echo Welcome to $(whereami)!
